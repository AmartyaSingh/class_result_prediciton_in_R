{
    "collab_server" : "",
    "contents" : "#Read semester 3 results.\nS3 <- read.csv(\"S3.csv\", header = TRUE)\nView(S3)\nstr(S3)\nsummary(S3)\n\n#Read semester 4 results.\nS4 <- read.csv(\"S4.csv\", header = TRUE)\nView(S4)\ntable(S4$Total)\nS4$Total <- S4$X10CS42_3 + S4$X10CS43_3 + S4$X10CS44_3 + S4$X10CS45_3 + S4$X10CS46_3 + S4$X10CSL47_3 + S4$X10CSL48_3 + S4$X10CS41_3\nView(S4)\ntable(S4$Total)\nstr(S4)\nsummary(S4)\n\n#Form data in the required format with P/F.\nsem3 <- S3[-27] \nsem4 <- S4[-27]\nView(sem3)\nView(sem4)\nsem3$Result <- ifelse((sem3$X10CS32_2 > 34 & sem3$X10CS33_2 > 34 & sem3$X10CS34_2 > 34 & sem3$X10CS35_2 > 34 & sem3$X10CS31_2 > 34 & sem3$X10CS36_2 > 34 & sem3$X10CS32_1 > 14 & sem3$X10CS33_1 > 14 & sem3$X10CS34_1 > 14 & sem3$X10CS35_1 > 14 & sem3$X10CS31_1 > 14 & sem3$X10CS36_1 > 14) ,\"P\", \"F\")\ntable(sem3$Result)\nsem4$Result <- ifelse((sem4$X10CS42_2 > 34 & sem4$X10CS43_2 > 34 & sem4$X10CS44_2 > 34 & sem4$X10CS45_2 > 34 & sem4$X10CS41_2 > 34 & sem4$X10CS46_2 > 34 & sem4$X10CS42_1 > 14 & sem4$X10CS43_1 > 14 & sem4$X10CS44_1 > 14 & sem4$X10CS45_1 > 14 & sem4$X10CS41_1 > 14 & sem4$X10CS46_1 > 14) ,\"P\", \"F\")\ntable(sem4$Result)\n\n#Factor the Result column.\nstr(sem3$Result)\nsem3$Result <- as.factor(sem3$Result)\nsem4$Result <- as.factor(sem4$Result)\nstr(sem3$Result)\n\n#Form the required training sets.\nx_train <- sem3[c(\"X10CS31_3\",\"X10CS32_3\",\"X10CS33_3\",\"X10CS34_3\",\"X10CS35_3\",\"X10CS36_3\")]\ny_train <- sem3$Result\ndata_train <- cbind(x_train,y_train)\n\n#Form the required testing set.\nx_test <- sem4[c(\"X10CS41_1\",\"X10CS42_1\",\"X10CS43_1\",\"X10CS44_1\",\"X10CS45_1\",\"X10CS46_1\")]\n\n#Change row names to match the training set.\ncolnames(x_test)[colnames(x_test)==\"X10CS41_1\"] <- \"X10CS31_1\"\ncolnames(x_test)[colnames(x_test)==\"X10CS42_1\"] <- \"X10CS32_1\"\ncolnames(x_test)[colnames(x_test)==\"X10CS43_1\"] <- \"X10CS33_1\"\ncolnames(x_test)[colnames(x_test)==\"X10CS44_1\"] <- \"X10CS34_1\"\ncolnames(x_test)[colnames(x_test)==\"X10CS45_1\"] <- \"X10CS35_1\"\ncolnames(x_test)[colnames(x_test)==\"X10CS46_1\"] <- \"X10CS36_1\"\n\nView(x_test)\nView(x_train)\n\n#Prepare a list of actual output.\ny_actual <- sem4$Result\n\n#Start training the models.\n\n#Support Vector Machine:\nlibrary(e1071)\n#fine tuning algorithms.\nfit_svm <- svm(y_train ~ ., data = data_train, cost = 2^(2:8), kernel = \"linear\")\nsummary(fit_svm)\ny_test_svm = predict(fit_svm, x_test)\nresult_svm = ifelse(y_actual == y_test_svm, 1,0)\ntable(result_svm)\n\n#Naive Bayes:\nlibrary(e1071)\nfit_nb <- naiveBayes(y_train ~ ., data = data_train)\nsummary(fit_nb)\ny_test_nb = predict(fit_nb, x_test)\nresult_nb = ifelse(y_actual == y_test_nb, 1,0)\ntable(result_nb)\n\n#Random Forest:\nlibrary(randomForest)\nfit_rf <- randomForest(y_train ~ ., data_train,ntree=500)\nsummary(fit_rf)\ny_test_rf = predict(fit_rf, x_test)\nresult_rf = ifelse(y_actual == y_test_rf,1,0)\ntable(result_rf)\n#Gradient Boosting:\n#library(caret)\n#fitControl <- trainControl( method = \"repeatedcv\", number = 4, repeats = 4)\n#fit_gb <- train(y_train ~ ., data = data_train, method = \"gbm\", trControl = fitControl,verbose = FALSE)\n#summary(fit_gb)\n#y_test_gb = predict(fit_gb,x_test)\n#result_gb = ifelse(y_actual == y_test_gb, 1,0)\n\n#Compute Results:\ntable(result_svm)\ntable(result_nb)\ntable(result_rf)\n#table(result_gb)\n\n#Visualizing the results:\n#my_data1 <- data.frame(as.integer(y_actual), as.integer(y_test_gb))\n#colnames(my_data1) <- c(\"Actual Results\", \"Gradient Boosting\")\n\nsem3_results <- sem3$Result\n\nmy_data2 <- data.frame(as.integer(y_actual), as.integer(y_test_nb))\ncolnames(my_data2) <- c(\"Actual Results\", \"Naive Bayes\")\n\nmy_data3 <- data.frame(as.integer(y_actual), as.integer(y_test_rf))\ncolnames(my_data3) <- c(\"Actual Results\", \"Random Forest\")\n\nmy_data4 <- data.frame(as.integer(sem3_results), as.integer(y_actual), as.integer(y_test_svm))\ncolnames(my_data4) <- c(\"Sem3 Actual Result\", \"Sem4 Actual Results\", \"SVM sem4 Pred\")\n\n#Plotting:\n#barplot(as.matrix(my_data1), main=\"Results Comparision\", ylab=\"Result\", beside=TRUE)\n\nbarplot(as.matrix(my_data2), main=\"Results Comparision\", ylab=\"Result\", beside=TRUE)\n\nbarplot(as.matrix(my_data3), main=\"Results Comparision\", ylab=\"Result\", beside=TRUE)\n\nbarplot(as.matrix(my_data4), main=\"Results Comparision\", ylab=\"Result\", beside=TRUE)\n",
    "created" : 1495624614683.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2536395634",
    "id" : "71A198E2",
    "lastKnownWriteTime" : 1496252958,
    "last_content_update" : 1496252958111,
    "path" : "~/ML in R/CRP_ML_PRO/Work1.R",
    "project_path" : "Work1.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}